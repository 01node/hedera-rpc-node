services:

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v2.11
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.internal.address=:8089" # Define an internal-only entrypoint
    ports:
      - "8089:80"
      - "8081:8080" # Optional: Traefik dashboard, remove if not needed
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Required for Traefik to read Docker service configurations

  api-proxy:
    image: nginx:1-alpine
    restart: unless-stopped
    ports:
      - 8080:8080
    tty: true
    configs:
      - source: api-proxy-inline-config
        target: /etc/nginx/conf.d/default.conf

  db:
    image: postgres:16-alpine
    environment:
      PGDATA: /var/lib/postgresql/data
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
      POSTGRES_PASSWORD: postgres_password
    ports:
      - 5432:5432
    restart: unless-stopped
    stop_grace_period: 2m
    stop_signal: SIGTERM
    tty: true
    volumes:
      - ./db:/var/lib/postgresql/data
      - ./hedera-mirror-importer/src/main/resources/db/scripts/init.sh:/docker-entrypoint-initdb.d/init.sh

  graphql:
    image: gcr.io/mirrornode/hedera-mirror-graphql:0.121.2
    pull_policy: missing
    deploy:
      replicas: 0
    environment:
      HEDERA_MIRROR_GRAPHQL_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-graphql/
    ports:
      - 8083:8083
    restart: unless-stopped
    tty: true
    volumes:
      - ./application.yml:/usr/etc/hedera-mirror-graphql/application.yml

  grpc:
    image: gcr.io/mirrornode/hedera-mirror-grpc:0.121.2
    pull_policy: missing
    restart: unless-stopped
    environment:
      HEDERA_MIRROR_GRPC_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-grpc/
      SPRING_DATA_REDIS_HOST: redis
    ports:
      - 5600:5600
    volumes:
      - ./application.yml:/usr/etc/hedera-mirror-grpc/application.yml

  importer:
    image: gcr.io/mirrornode/hedera-mirror-importer:0.121.2
    pull_policy: missing
    restart: unless-stopped
    environment:
      HEDERA_MIRROR_IMPORTER_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-importer/
      SPRING_DATA_REDIS_HOST: redis
    volumes:
      - ./application.yml:/usr/etc/hedera-mirror-importer/application.yml

  monitor:
    deploy:
      replicas: 0
    image: gcr.io/mirrornode/hedera-mirror-monitor:0.121.2
    pull_policy: missing
    restart: unless-stopped
    environment:
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-monitor/
    volumes:
      - ./application.yml:/usr/etc/hedera-mirror-monitor/application.yml

  redis:
    image: redis:6-alpine
    ports:
      - 6379:6379
    restart: unless-stopped
    stop_grace_period: 2m
    stop_signal: SIGTERM
    tty: true

  rest:
    image: gcr.io/mirrornode/hedera-mirror-rest:0.121.2
    pull_policy: missing
    labels:
      - "traefik.enable=true"
      # General PathPrefix rule for rest
      - "traefik.http.routers.rest-router.rule=PathPrefix(`/api/v1`)"
      - "traefik.http.routers.rest-router.priority=1"
      - "traefik.http.routers.rest-router.entrypoints=internal"
      - "traefik.http.services.rest-service.loadbalancer.server.port=5551"
    environment:
      HEDERA_MIRROR_REST_DB_HOST: db
      HEDERA_MIRROR_REST_REDIS_URI: redis://redis:6379
    ports:
      - 5551:5551
    restart: unless-stopped
    tty: true

  rest-java:
    image: gcr.io/mirrornode/hedera-mirror-rest-java:0.121.2
    pull_policy: missing
    labels:
      - "traefik.enable=true"
      # Specific regex rules for rest-java
      - "traefik.http.routers.rest-java-allowances.rule=PathPrefix(`/api/v1/accounts`) && PathRegexp(`/api/v1/accounts/(\\d+\\.){0,2}(\\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/allowances/nfts`)"
      - "traefik.http.routers.rest-java-allowances.priority=100"
      - "traefik.http.routers.rest-java-allowances.entrypoints=internal"
      - "traefik.http.services.rest-java.loadbalancer.server.port=8084"

      - "traefik.http.routers.rest-java-airdrops-outstanding.rule=PathPrefix(`/api/v1/accounts`) && PathRegexp(`/api/v1/accounts/(\\d+\\.){0,2}(\\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/airdrops/outstanding`)"
      - "traefik.http.routers.rest-java-airdrops-outstanding.priority=100"
      - "traefik.http.routers.rest-java-airdrops-outstanding.entrypoints=internal"

      - "traefik.http.routers.rest-java-airdrops-pending.rule=PathPrefix(`/api/v1/accounts`) && PathRegexp(`/api/v1/accounts/(\\d+\\.){0,2}(\\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/airdrops/pending`)"
      - "traefik.http.routers.rest-java-airdrops-pending.priority=100"
      - "traefik.http.routers.rest-java-airdrops-pending.entrypoints=internal"

      - "traefik.http.routers.rest-java-topics.rule=PathPrefix(`/api/v1/topics`) && PathRegexp(`/api/v1/topics/(\\d+\\.){0,2}\\d+$`)"
      - "traefik.http.routers.rest-java-topics.priority=100"
      - "traefik.http.routers.rest-java-topics.entrypoints=internal"
    environment:
      HEDERA_MIRROR_RESTJAVA_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-rest-java/
    ports:
      - 8084:8084
    restart: unless-stopped
    tty: true
    volumes:
      - ./application.yml:/usr/etc/hedera-mirror-rest-java/application.yml

  rosetta:
    image: gcr.io/mirrornode/hedera-mirror-rosetta:0.121.2
    deploy:
      replicas: 0
    pull_policy: missing
    environment:
      HEDERA_MIRROR_ROSETTA_DB_HOST: db
    ports:
      - 5700:5700
    restart: unless-stopped
    tty: true
    volumes:
      - ./application.yml:/src/hedera-mirror-rosetta/application.yml

  web3:
    image: gcr.io/mirrornode/hedera-mirror-web3:0.121.2
    pull_policy: missing
    labels:
      - "traefik.enable=true"
      # Router for PathPrefix
      - "traefik.http.routers.web3-contracts-call.rule=PathPrefix(`/api/v1/contracts/call`)"
      - "traefik.http.routers.web3-contracts-call.priority=100"
      - "traefik.http.routers.web3-contracts-call.entrypoints=internal"
      - "traefik.http.services.web3-service.loadbalancer.server.port=8545"
      # Router for RegularExpression
      - "traefik.http.routers.web3-contracts-results-opcodes.rule=PathRegexp(`/api/v1/contracts/results/((0x)?[A-Fa-f0-9]{64}|\\d+\\.\\d+\\.\\d+-\\d+-\\d+)/opcodes`)"
      - "traefik.http.routers.web3-contracts-results-opcodes.priority=110" # Higher priority for specificity
      - "traefik.http.routers.web3-contracts-results-opcodes.entrypoints=internal"
      - "traefik.http.services.web3-service.loadbalancer.server.port=8545"
    environment:
      HEDERA_MIRROR_WEB3_DB_HOST: db
      SPRING_CONFIG_ADDITIONAL_LOCATION: file:/usr/etc/hedera-mirror-web3/
    ports:
      - 8545:8545
    restart: unless-stopped
    tty: true
    volumes:
      - ./application.yml:/usr/etc/hedera-mirror-web3/application.yml

  relay:
    container_name: hedera-json-rpc-relay
    image: "ghcr.io/hashgraph/hedera-json-rpc-relay:0.63.2"
    restart: "unless-stopped"
    ports:
      - 7546:7546
    pull_policy: missing
    tty: true
    volumes:
      - ./.env:/home/node/app/.env
    environment:
      REDIS_ENABLED: true
      REDIS_URL: "redis://redis-rly:6479"
      BATCH_REQUESTS_ENABLED: true
      RATE_LIMIT_DISABLED: true

  relay-ws:
    container_name: hedera-json-rpc-relay-ws
    image: "ghcr.io/hashgraph/hedera-json-rpc-relay:0.63.2"
    command: start:ws
    environment:
      HEALTHCHECK_PORT: 8547
      SUBSCRIPTIONS_ENABLED: true
      REDIS_ENABLED: true
      REDIS_URL: "redis://redis-rly:6479"
    restart: "unless-stopped"
    ports:
      - 8546:8546
      - 8547:8547
    pull_policy: missing
    tty: true
    volumes:
      - ./.env:/home/node/app/.env

  redis-rly:
    image: redis:latest
    command: --port 6479
    ports:
      - '6479:6479'
    volumes:
      - redis-data:/data
    restart: always

volumes:
  redis-data:

configs:
  api-proxy-inline-config:
    content: |
      # YAML uses $ for variable substitution, so we use $$ when using nginx variables.

      # The upstream directive allows the use of the keepalive (good for performance),
      # but the hostname must be resolvable when nginx starts.
      upstream grpc_host      { server grpc:5600;       keepalive 16; }
      upstream rest_host      { server rest:5551;       keepalive 16; }
      upstream rest_java_host { server rest-java:8084;  keepalive 16; }
      upstream web3_host      { server web3:8545;       keepalive 16; }

      server {
        # graphql and rosetta are optional containers, disabled by default, so we cannot leverage the upstream directive.
        set $$graphql_host graphql:8083;
        set $$rosetta_host rosetta:5700;

        # common configurations
        listen 8080;
        proxy_http_version 1.1;
        proxy_set_header Host $$host;
        proxy_set_header X-Real-IP $$remote_addr;
        proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $$scheme;
        proxy_set_header Connection "upgrade";
        resolver 127.0.0.11 valid=600s; # let docker resolve the host names
        http2 on; # enable gRPC

        # web3 host
        location /api/v1/contracts/call { proxy_pass http://web3_host$$request_uri; }
        location ~ "^/api/v1/contracts/results/((0x)?[A-Fa-f0-9]{64}|\d+\.\d+\.\d+-\d+-\d+)/opcodes" { proxy_pass http://web3_host$$request_uri; }

        # rest-java host
        location ~ "^/api/v1/accounts/(\d+\.){0,2}(\d+|(0x)?[A-Fa-f0-9]{40}|(?:[A-Z2-7]{8})*(?:[A-Z2-7]{2}|[A-Z2-7]{4,5}|[A-Z2-7]{7,8}))/(allowances/nfts|airdrops)" { proxy_pass http://rest_java_host$$request_uri; }
        location ~ "^/api/v1/topics/(\d+\.){0,2}\d+$" { proxy_pass http://rest_java_host$$request_uri; }

        # rest host
        location /api/v1/ { proxy_pass http://rest_host$$request_uri; }

        # grpc host
        # Setting 600s read timeout for topic subscription. When the client receives a message the timeout resets to 0.
        location = /com.hedera.mirror.api.proto.ConsensusService/subscribeTopic { grpc_read_timeout 600s; grpc_pass grpc://grpc_host; }
        location /com.hedera.mirror.api.proto. { grpc_pass grpc://grpc_host; }
        location /grpc.reflection.v1alpha.ServerReflection { grpc_pass grpc://grpc_host; }

        # graphql host
        location = /graphql/alpha { proxy_pass http://$$graphql_host$$request_uri; }

        # rosetta host
        location /rosetta/ { rewrite ^/rosetta/(.*) /$$1 break; proxy_pass http://$$rosetta_host; }
      }
